--DB PROYECTO 2

CREATE DATABASE ProyectoProgra2

USE ProyectoProgra2
go

CREATE TABLE Usuarios 
(
	UsuarioID int PRIMARY KEY IDENTITY,
	Nombre Varchar(50) not null,
	Correo varchar(50),
	Telefono varchar(15) unique
)
CREATE TABLE Equipos
(
	EquipoID int PRIMARY KEY IDENTITY,
	TipoEquipo varchar(50) not null,
	Modelo varchar(50),
	UsuarioID int,
	CONSTRAINT fk_usuarioid FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID)
)
CREATE TABLE Reparaciones
(
	ReparacionID int PRIMARY KEY IDENTITY,
	EquipoID int,
	FechaSolicitud datetime,
	Estado char (1),
	CONSTRAINT fk_equipoid FOREIGN KEY (EquipoID) REFERENCES Equipos(EquipoID)
)
CREATE TABLE Tecnicos
(
	TecnicoID int PRIMARY KEY IDENTITY,
	Nombre Varchar(50),
	Especialidad varchar (50)
)
CREATE TABLE DetallesReparacion
(
	DetalleID int PRIMARY KEY IDENTITY,
	ReparacionID int,
	Descripcion varchar(50),
	FechaInicio datetime,
	FechaFin datetime,
	CONSTRAINT fk_reparacionid FOREIGN KEY(ReparacionID) REFERENCES Reparaciones(ReparacionID)
)
CREATE TABLE Asignaciones
(
	AsignacionID int PRIMARY KEY IDENTITY,
	ReparacionID int,
	TecnicoID int,
	FechaAsignacion datetime,
	CONSTRAINT fk_reparacionid2 FOREIGN KEY (ReparacionID) REFERENCES Reparaciones(ReparacionID),
	CONSTRAINT fk_tecnicoid FOREIGN KEY (TecnicoID) REFERENCES Tecnicos(TecnicoID)
)

--PROCEDIMIENTOS ALMACENADOS TABLA EQUIPOS

-- AGREGAR EQUIPOS
CREATE PROCEDURE IngresarEquipo
 @TipoEquipo varchar(50),
 @Modelo varchar(50),
 @UsuarioID int
AS
BEGIN
	INSERT INTO Equipos(TipoEquipo, Modelo, UsuarioID)
	VALUES (@TipoEquipo, @Modelo, @UsuarioID)
END

-- BORRAR EQUIPO POR ID
CREATE PROCEDURE BorrarEquipo
 @EquipoID int
AS
BEGIN
	DELETE Equipos WHERE EquipoID = @EquipoID
END

--CONSULTA POR FILTRO EQUIPO ID
CREATE PROCEDURE ConsultarEquipo 
 @EquipoID int
AS
BEGIN
	SELECT * FROM Equipos WHERE EquipoID = @EquipoID
END

--MODIFICAR EQUIPO
CREATE PROCEDURE ModificarEquipo
 @EquipoID int,
 @TipoEquipo varchar(50),
 @Modelo varchar(50),
 @UsuarioID int
AS
BEGIN
	UPDATE Equipos SET TipoEquipo = @TipoEquipo, Modelo = @Modelo, UsuarioID = @UsuarioID WHERE EquipoID = @EquipoID
END

--PROCEDIMIENTOS ALMACENADOS TABLA USUARIOS

-- AGREGAR USUARIOS
CREATE PROCEDURE IngresarUsuario
 @Nombre varchar(50),
 @Correo varchar(50),
 @Telefono varchar(50)
AS
BEGIN
	INSERT INTO Usuarios(Nombre, Correo, Telefono)
	VALUES (@Nombre, @Correo, @Telefono)
END

-- BORRAR USUARIO POR ID
CREATE PROCEDURE BorrarUsuario
 @UsuarioID int
AS
BEGIN
	DELETE Usuarios WHERE UsuarioID = @UsuarioID
END

--CONSULTA POR FILTRO USUARIOID - JALA TODA LA INFO COMPLETA DE DICHO USER ID
CREATE PROCEDURE ConsultarUsuario
 @UsuarioID int
AS
BEGIN
	SELECT * FROM Usuarios WHERE UsuarioID = @UsuarioID
END

--MODIFICAR USUARIO POR ID
CREATE PROCEDURE ModificarUsuario
 @UsuarioID int,
 @Nombre varchar(50),
 @Correo varchar(50),
 @Telefono varchar(50)
AS
BEGIN
	UPDATE Usuarios 
	SET Nombre = @Nombre, Correo = @Correo, Telefono = @Telefono WHERE UsuarioID = @UsuarioID
END

--PROCEDIMIENTOS ALMACENADOS TABLA TECNICOS

-- AGREGAR TECNICOS
CREATE PROCEDURE IngresarTecnico
 @Nombre varchar(50),
 @Especialidad varchar(50)
AS
BEGIN
	INSERT INTO Tecnicos(Nombre, Especialidad) VALUES (@Nombre, @Especialidad)
END

-- BORRAR TECNICO POR ID
CREATE PROCEDURE BorrarTecnico
 @TecnicoID int
AS
BEGIN
	DELETE Tecnicos WHERE TecnicoID = @TecnicoID
END

--CONSULTA POR FILTRO TECNICOID - JALA TODA LA INFO COMPLETA DE DICHO USER ID
CREATE PROCEDURE ConsultarTecnico
 @TecnicoID int
AS
BEGIN
	SELECT * FROM Tecnicos WHERE TecnicoID = @TecnicoID
END

--MODIFICAR TECNICO POR ID
CREATE PROCEDURE ModificarTecnico
 @TecnicoID int,
 @Nombre varchar(50),
 @Especialidad varchar(50)
AS
BEGIN
	UPDATE Tecnicos 
	SET Nombre = @Nombre, Especialidad = @Especialidad WHERE TecnicoID = @TecnicoID
END

--PARTE 2 DE LA DB PROYECTO 2

create table UsersAD
(
codigo int identity primary key,
nombre varchar(50),
correo varchar(50) not null,
clave varchar(50)not null,
constraint uq_correo UNIQUE(correo)
)

create table Roles
(
codigo int identity primary key,
rolename varchar(40) constraint uq_rolename unique
)

create table UsersRoles
(
iduser int constraint fk_iduser foreign key (iduser) references UsersAD(codigo),
idrol int constraint fk_idrol foreign key (idrol) references Roles(codigo),
)

--PROCEDIMIENTOS ALMACENADOS TABLA UsersAD

--VALIDAR LOGIN
create procedure ValidarUsuario

@correo varchar(50),
@clave varchar(50),
as
begin
	select correo, clave, nombre from UsersAD where correo = @correo and clave= @clave
end

--MODIFICAR PASS USUARIO POR CORREO
CREATE PROCEDURE ModificarPasswordUserAD
 @correo varchar(50),
 @clave varchar(50)
AS
BEGIN
	UPDATE UsersAD 
	SET clave = @clave WHERE correo = @correo
END

--AGREGAR USER A LA BD Y DAR ROL
CREATE PROCEDURE RegistrarUsuarioYRol
    @nombre varchar(50),
    @correo varchar(50),
    @clave varchar(50),
    @idrol int
AS
BEGIN
    DECLARE @idUsuario INT;

    -- Insertar el usuario en la tabla UsersAD
    INSERT INTO UsersAD(nombre, correo, clave)
    VALUES (@nombre, @correo, @clave);

    -- Obtener el código (identity) del usuario recién insertado
    SET @idUsuario = SCOPE_IDENTITY();

    -- Insertar la relación en la tabla UsersRoles
    INSERT INTO UsersRoles(iduser, idrol)
    VALUES (@idUsuario, @idRol);
END

--VALIDAR CORREO
CREATE PROCEDURE ValidarUserEmailAD
 @correo varchar(50)
AS
BEGIN
	select correo from UsersAD where correo = @correo
END


Actual                       Alias
@AsignacionID    pasar a     @AID
@ReparacionID    pasar a     @RID
@TecnicoID       pasar a     @TID
@UsuarioID       pasar a     @UID

